# !/bin/python
# -*- coding: utf-8 -*-
u"""SecureTea Social Engineering
Project:
    ╔═╗┌─┐┌─┐┬ ┬┬─┐┌─┐╔╦╗┌─┐┌─┐
    ╚═╗├┤ │  │ │├┬┘├┤  ║ ├┤ ├─┤
    ╚═╝└─┘└─┘└─┘┴└─└─┘ ╩ └─┘┴ ┴
    Author: Digvijay Bhosale <digvijayb1729@gmail.com> August 13 2021
    Version: 2.1
    Module: SecureTea
"""

import subprocess
import os
import json
import pandas


class MalwareAnalysis:
    def __init__(self, file, filename):
        self.file = file
        self.filename = filename
        self.API_KEY = '8c3be18d935b21602ccaecb7224e1dd1dd938058b294520417681e430d962b1c'
        self.report_id = ''
        self.results = ''

    def runner(self):
        self.virustotal_file_upload()
        av_engines, av_engines_list = self.virustotal_get_results()
        self.show_results(av_engines, av_engines_list)

    def virustotal_file_upload(self):
        file_size = os.path.getsize(self.filename)
        if int(file_size) < 32000000:
            base_url = 'https://www.virustotal.com/api/v3/files'
            headers = 'x-apikey: ' + self.API_KEY
            file_path = '@' + self.filename

            process = subprocess.Popen(['curl', '--request', 'POST', '--url', base_url,
                                        '--header', headers,
                                        '--form', 'file=' + file_path],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE)
            stdout, stderr = process.communicate()
            data = stdout.decode('utf-8')
            stderr = stderr.decode('utf-8')
            json_data = json.loads(data)
            self.report_id = json_data['data']['id']

        else:
            print('File Size greater than 32MB')
            print('Current file size is :'+str(file_size))
            print('Kindly visit https://www.virustotal.com/ and submit file')

    def virustotal_get_results(self):
        if self.report_id == '':
            print('No report ID available')
            return
        base_url = 'https://www.virustotal.com/api/v3/analyses/'
        url = base_url + str(self.report_id)
        headers = 'x-apikey: ' + self.API_KEY

        process = subprocess.Popen(['curl', '--request', 'GET', '--url', url,
                                    '--header', headers],
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        data = stdout.decode('utf-8')
        stderr = stderr.decode('utf-8')
        self.results = json.loads(data)
        av_engines = self.results['data']['attributes']['results'].keys()
        av_engines_list = self.results['data']['attributes']['results']
        print(av_engines, av_engines_list)
        return av_engines, av_engines_list

    def show_results(self, av_engines, av_engines_list):
        if self.results == '':
            print('No results available')
            return
        verbosity = int(input('Enter Verbosity (Default : 2) : ') or 2)
        if verbosity == 1:
            self.verbosity_1(av_engines, av_engines_list)
        elif verbosity == 2:
            self.verbosity_2(av_engines, av_engines_list)
        elif verbosity == 3:
            self.verbosity_3(av_engines, av_engines_list)
        elif verbosity == 4:
            self.verbosity_4(av_engines, av_engines_list)
        else:
            print("Given Verbosity not available")
            self.verbosity_1(av_engines, av_engines_list)

    def verbosity_1(self, av_engines, av_engines_list):
        undetected = 0
        detected = 0
        unsupported = 0
        total = 0
        for av_engine in av_engines:
            print(av_engines_list[av_engine]['category'])
            if av_engines_list[av_engine]['category'] == 'undetected':
                undetected = undetected + 1
                total = total + 1
            elif av_engines_list[av_engine]['category'] == 'detected':
                detected = detected + 1
                total = total + 1
            elif av_engines_list[av_engine]['category'] == 'type-unsupported':
                unsupported = unsupported + 1
                total = total + 1
            else:
                total = total + 1

        print('Detected : ' + str(detected) + '/' + str(total))
        print('Undetected : ' + str(undetected) + '/' + str(total))
        print('Type unsupported : ' + str(unsupported) + '/' + str(total))

    def verbosity_2(self, av_engines, av_engines_list):
        print('DETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'detected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tDetected')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tDetected')
                else:
                    print(str(av_engine) + '\t\t\tDetected')
        print('-----------------------------------------------')
        print('UNDETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'undetected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tUndetected')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tUndetected')
                else:
                    print(str(av_engine) + '\t\t\tUndetected')
        print('-----------------------------------------------')
        print('TYPE UNSUPPORTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'type-unsupported':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\ttype-unsupported')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\ttype-unsupported')
                else:
                    print(str(av_engine) + '\t\t\ttype-unsupported')
        print('-----------------------------------------------')

    def verbosity_3(self, av_engines, av_engines_list):
        print('DETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'detected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tDetected', end='')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tDetected', end='')
                else:
                    print(str(av_engine) + '\t\t\tDetected', end='')
                print('\tMethod : ' + str(av_engines_list[av_engine]['method']) +
                      '\tResult : ' + str(av_engines_list[av_engine]['result']))
        print('-----------------------------------------------')
        print('UNDETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'undetected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tUndetected', end='')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tUndetected', end='')
                else:
                    print(str(av_engine) + '\t\t\tUndetected', end='')
                print('\tMethod : ' + str(av_engines_list[av_engine]['method']) +
                      '\tResult : ' + str(av_engines_list[av_engine]['result']))
        print('-----------------------------------------------')
        print('TYPE UNSUPPORTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'type-unsupported':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\ttype-unsupported', end='')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\ttype-unsupported', end='')
                else:
                    print(str(av_engine) + '\t\t\ttype-unsupported', end='')
                print('\tMethod : ' + str(av_engines_list[av_engine]['method']) +
                      '\tResult : ' + str(av_engines_list[av_engine]['result']))
        print('-----------------------------------------------')

    def verbosity_4(self, av_engines, av_engines_list):
        df1 = pandas.DataFrame(av_engines_list)
        df1 = df1.transpose()
        print(df1.to_string())




